(; Some results about logical connectives ;)

thm imp_refl : (Prf (all o (A : (El o) => (imp A A)))) 
:= (all_i o (A : (El o) => (imp A A)) (A : Prop => (imp_i A A (pA : (Prf A) => pA)))).

thm imp_trans : (Prf (all o (A : (El o) => (all o (B : (El o) => (all o (C : (El o) => (imp (and (imp A B) (imp B C)) (imp A C))))))))) 
:= (all_i o 
    (A : (El o) => (all o (B : (El o) => (all o (C : (El o) => (imp (and (imp A B) (imp B C)) (imp A C))))))) 
    (A : Prop => (all_i o 
        (B : (El o) => (all o (C : (El o) => (imp (and (imp A B) (imp B C)) (imp A C))))) 
        (B : Prop => (all_i o 
            (C : (El o) => (imp (and (imp A B) (imp B C)) (imp A C))) 
            (C : Prop => (imp_i (and (imp A B) (imp B C)) (imp A C) 
                (pABBC : (Prf (and (imp A B) (imp B C))) => 
                    (imp_i A C (pA : (Prf A) => 
                    (imp_e B C (and_er (imp A B) (imp B C) pABBC) (imp_e A B (and_el (imp A B) (imp B C) pABBC) pA)))))))))))).

thm and_comm : (Prf (all o (A : (El o) => (all o (B : (El o) => (imp (and A B) (and B A))))))) 
:= (all_i o 
    (A : (El o) => (all o (B : (El o) => (imp (and A B) (and B A))))) 
    (A : Prop => (all_i o 
        (B : (El o) => (imp (and A B) (and B A))) 
        (B : Prop => (imp_i (and A B) (and B A) (pAB : (Prf (and A B)) => (and_i B (and_er A B pAB) A (and_el A B pAB)))))))).

thm and_assoc : (Prf (all o (A : (El o) => (all o (B : (El o) => (all o (C : (El o) => (iff (and (and A B) C) (and A (and B C)))))))))) 
:= (all_i o 
    (A : (El o) => (all o (B : (El o) => (all o (C : (El o) => (iff (and (and A B) C) (and A (and B C)))))))) 
    (A : Prop => (all_i o 
        (B : (El o) => (all o (C : (El o) => (iff (and (and A B) C) (and A (and B C)))))) 
        (B : Prop => (all_i o 
            (C : (El o) => (iff (and (and A B) C) (and A (and B C)))) 
            (C : Prop => (and_i 
                (imp (and (and A B) C) (and A (and B C))) 
                (imp_i (and (and A B) C) (and A (and B C)) 
                    (pABC : (Prf (and (and A B) C)) => (and_i 
                        A 
                        (and_el A B (and_el (and A B) C pABC)) 
                        (and B C) 
                        (and_i B (and_er A B (and_el (and A B) C pABC)) C (and_er (and A B) C pABC))))) 
                (imp (and A (and B C)) (and (and A B) C)) 
                (imp_i (and A (and B C)) (and (and A B) C) 
                    (pABC : (Prf (and A (and B C))) => (and_i 
                        (and A B) 
                        (and_i A (and_el A (and B C) pABC) B (and_el B C (and_er A (and B C) pABC))) 
                        C 
                        (and_er B C (and_er A (and B C) pABC)))))))))))).

thm prop_and : (Prf (all o (A : (El o) => (all o (B : (El o) => (ex o (P : (El o) => (and (imp P A) (imp P B))))))))) 
:= (all_i o 
    (A : (El o) => (all o (B : (El o) => (ex o (P : (El o) => (and (imp P A) (imp P B))))))) 
    (A : Prop => (all_i o 
        (B : (El o) => (ex o (P : (El o) => (and (imp P A) (imp P B))))) 
        (B : Prop => (ex_i o (P : (El o) => (and (imp P A) (imp P B))) (and A B) (and_i 
            (imp (and A B) A) 
            (imp_i (and A B) A (pAB : (Prf (and A B)) => (and_el A B pAB))) 
            (imp (and A B) B) (imp_i (and A B) B (pAB : (Prf (and A B)) => (and_er A B pAB))))))))).

thm or_comm : (Prf (all o (A : (El o) => (all o (B : (El o) => (imp (or A B) (or B A))))))) 
:= (all_i o 
    (A : (El o) => (all o (B : (El o) => (imp (or A B) (or B A))))) 
    (A : Prop => (all_i o 
        (B : (El o) => (imp (or A B) (or B A))) 
        (B : Prop => (imp_i (or A B) (or B A) 
            (pAB : (Prf (or A B)) => (or_e A B pAB (or B A) 
                (pA : (Prf A) => (or_ir B A pA)) 
                (pB : (Prf B) => (or_il B pB A))))))))).

thm or_assoc : (Prf (all o (A : (El o) => (all o (B : (El o) => (all o (C : (El o) => (iff (or (or A B) C) (or A (or B C)))))))))) 
:= (all_i o 
    (A : (El o) => (all o (B : (El o) => (all o (C : (El o) => (iff (or (or A B) C) (or A (or B C)))))))) 
    (A : Prop => (all_i o 
        (B : (El o) => (all o (C : (El o) => (iff (or (or A B) C) (or A (or B C)))))) 
        (B : Prop => (all_i o (C : (El o) => (iff (or (or A B) C) (or A (or B C)))) 
            (C : Prop => (and_i 
                (imp (or (or A B) C) (or A (or B C))) 
                (imp_i (or (or A B) C) (or A (or B C)) (pABC : (Prf (or (or A B) C)) => (or_e (or A B) C pABC (or A (or B C)) 
                    (pAB : (Prf (or A B)) => (or_e A B pAB (or A (or B C)) 
                        (pA : (Prf A) => (or_il A pA (or B C))) 
                        (pB : (Prf B) => (or_ir A (or B C) (or_il B pB C))))) 
                    (pC : (Prf C) => (or_ir A (or B C) (or_ir B C pC)))))) 
                (imp (or A (or B C)) (or (or A B) C)) 
                (imp_i (or A (or B C)) (or (or A B) C) (pABC : (Prf (or A (or B C))) => (or_e A (or B C) pABC (or (or A B) C) 
                    (pA : (Prf A) => (or_il (or A B) (or_il A pA B) C)) 
                    (pBC : (Prf (or B C)) => (or_e B C pBC (or (or A B) C) 
                        (pB : (Prf B) => (or_il (or A B) (or_ir A B pB) C)) 
                        (pC : (Prf C) => (or_ir (or A B) C pC)))))))))))))).

thm iff_i : (A : Prop -> (B : Prop -> ((Prf (imp A B)) -> ((Prf (imp B A)) -> (Prf (iff A B)))))) 
:= (A : Prop => (B : Prop => (pAB : (Prf (imp A B)) => (pBA : (Prf (imp B A)) => (and_i (imp A B) pAB (imp B A) pBA))))).

thm iff_el : (A : Prop -> (B : Prop -> ((Prf (iff A B)) -> (Prf (imp A B))))) 
:= (A : Prop => (B : Prop => (pAB : (Prf (iff A B)) => (and_el (imp A B) (imp B A) pAB)))).

thm iff_er : (A : Prop -> (B : Prop -> ((Prf (iff A B)) -> (Prf (imp B A))))) 
:= (A : Prop => (B : Prop => (pAB : (Prf (iff A B)) => (and_er (imp A B) (imp B A) pAB)))).

thm iff_refl_rule : (A : Prop -> (Prf (iff A A))) 
:= (A : Prop => (and_i 
    (imp A A) 
    (all_e o (P : (El o) => (imp P P)) imp_refl A) 
    (imp A A) 
    (all_e o (P : (El o) => (imp P P)) imp_refl A))).

thm iff_refl : (Prf (all o (A : (El o) => (iff A A)))) 
:= (all_i o (A : (El o) => (iff A A)) (A : Prop => (iff_refl_rule A))).

thm iff_trans_rule : (A : Prop -> (B : Prop -> (C : Prop -> ((Prf (iff A B)) -> ((Prf (iff B C)) -> (Prf (iff A C))))))) 
:= (A : Prop => (B : Prop => (C : Prop => (pAB : (Prf (iff A B)) => (pBC : (Prf (iff B C)) => (and_i 
    (imp A C) 
    (imp_i A C (pA : (Prf A) => (imp_e B C 
        (and_el (imp B C) (imp C B) pBC) 
        (imp_e A B (and_el (imp A B) (imp B A) pAB) pA)))) 
    (imp C A) 
    (imp_i C A (pC : (Prf C) => (imp_e B A 
        (and_er (imp A B) (imp B A) pAB) 
        (imp_e C B (and_er (imp B C) (imp C B) pBC) pC)))))))))).

thm iff_trans : (Prf (all o (A : (El o) => (all o (B : (El o) => (all o (C : (El o) => (imp (and (iff A B) (iff B C)) (iff A C))))))))) 
:= (all_i o 
    (A : (El o) => (all o (B : (El o) => (all o (C : (El o) => (imp (and (iff A B) (iff B C)) (iff A C))))))) 
    (A : Prop => (all_i o 
        (B : (El o) => (all o (C : (El o) => (imp (and (iff A B) (iff B C)) (iff A C))))) 
        (B : Prop => (all_i o 
            (C : (El o) => (imp (and (iff A B) (iff B C)) (iff A C))) 
            (C : Prop => (imp_i 
                (and (iff A B) (iff B C)) 
                (iff A C) 
                (pABBC : (Prf (and (iff A B) (iff B C))) => (iff_trans_rule A B C 
                    (and_el (iff A B) (iff B C) pABBC) 
                    (and_er (iff A B) (iff B C) pABBC)))))))))).

thm iff_sym_rule : (A : Prop -> (B : Prop -> ((Prf (iff A B)) -> (Prf (iff B A))))) 
:= (A : Prop => (B : Prop => (pAB : (Prf (iff A B)) => (and_i 
    (imp B A) 
    (and_er (imp A B) (imp B A) pAB) 
    (imp A B) 
    (and_el (imp A B) (imp B A) pAB))))).

thm iff_sym : (Prf (all o (A : (El o) => (all o (B : (El o) => (imp (iff A B) (iff B A))))))) 
:= (all_i o 
    (A : (El o) => (all o (B : (El o) => (imp (iff A B) (iff B A))))) 
    (A : Prop => (all_i o 
        (B : (El o) => (imp (iff A B) (iff B A))) 
        (B : Prop => (imp_i (iff A B) (iff B A) (pAB : (Prf (iff A B)) => (iff_sym_rule A B pAB))))))).

thm iff_and : (A : Prop -> (A' : Prop -> (B : Prop -> (B' : Prop -> ((Prf (iff A A')) -> ((Prf (iff B B')) -> (Prf (iff (and A B) (and A' B'))))))))) 
:= (A : Prop => (A' : Prop => (B : Prop => (B' : Prop => (pAA' : (Prf (iff A A')) => (pBB' : (Prf (iff B B')) => (and_i 
    (imp (and A B) (and A' B')) 
    (imp_i (and A B) (and A' B') (pAB : (Prf (and A B)) => (and_i 
        A' 
        (imp_e A A' (and_el (imp A A') (imp A' A) pAA') (and_el A B pAB)) 
        B' 
        (imp_e B B' (and_el (imp B B') (imp B' B) pBB') (and_er A B pAB))))) 
    (imp (and A' B') (and A B)) 
    (imp_i (and A' B') (and A B) (pAB' : (Prf (and A' B')) => (and_i 
        A 
        (imp_e A' A (and_er (imp A A') (imp A' A) pAA') (and_el A' B' pAB')) 
        B 
        (imp_e B' B (and_er (imp B B') (imp B' B) pBB') (and_er A' B' pAB')))))))))))).

thm iff_or : (A : Prop -> (A' : Prop -> (B : Prop -> (B' : Prop -> ((Prf (iff A A')) -> ((Prf (iff B B')) -> (Prf (iff (or A B) (or A' B'))))))))) 
:= (A : Prop => (A' : Prop => (B : Prop => (B' : Prop => (pAA' : (Prf (iff A A')) => (pBB' : (Prf (iff B B')) => (and_i 
    (imp (or A B) (or A' B')) 
    (imp_i (or A B) (or A' B') (pAB : (Prf (or A B)) => (or_e A B pAB (or A' B') 
        (pA : (Prf A) => (or_il A' (imp_e A A' (and_el (imp A A') (imp A' A) pAA') pA) B')) 
        (pB : (Prf B) => (or_ir A' B' (imp_e B B' (and_el (imp B B') (imp B' B) pBB') pB)))))) 
    (imp (or A' B') (or A B)) 
    (imp_i (or A' B') (or A B) (pAB' : (Prf (or A' B')) => (or_e A' B' pAB' (or A B) 
        (pA' : (Prf A') => (or_il A (imp_e A' A (and_er (imp A A') (imp A' A) pAA') pA') B)) 
        (pB' : (Prf B') => (or_ir A B (imp_e B' B (and_er (imp B B') (imp B' B) pBB') pB'))))))))))))).

thm iff_imp : (A : Prop -> (A' : Prop -> (B : Prop -> (B' : Prop -> ((Prf (iff A A')) -> ((Prf (iff B B')) -> (Prf (iff (imp A B) (imp A' B'))))))))) 
:= (A : Prop => (A' : Prop => (B : Prop => (B' : Prop => (pAA' : (Prf (iff A A')) => (pBB' : (Prf (iff B B')) => (and_i 
    (imp (imp A B) (imp A' B')) 
    (imp_i (imp A B) (imp A' B') (pAB : (Prf (imp A B)) => (imp_i A' B' (pA' : (Prf A') => (imp_e B B' 
        (and_el (imp B B') (imp B' B) pBB') 
        (imp_e A B pAB (imp_e A' A (and_er (imp A A') (imp A' A) pAA') pA'))))))) 
    (imp (imp A' B') (imp A B)) 
    (imp_i (imp A' B') (imp A B) (pAB' : (Prf (imp A' B')) => (imp_i A B (pA : (Prf A) => (imp_e B' B 
        (and_er (imp B B') (imp B' B) pBB') 
        (imp_e A' B' pAB' (imp_e A A' (and_el (imp A A') (imp A' A) pAA') pA)))))))))))))).

thm iff_neg : (A : Prop -> (A' : Prop -> ((Prf (iff A A')) -> (Prf (iff (not A) (not A')))))) 
:= (A : Prop => (A' : Prop => (pAA' : (Prf (iff A A')) => (and_i 
    (imp (not A) (not A')) 
    (imp_i (not A) (not A') (pNA : (Prf (not A)) => (neg_i A' (pA' : (Prf A') => (neg_e A pNA (imp_e A' A (and_er (imp A A') (imp A' A) pAA') pA')))))) 
    (imp (not A') (not A)) 
    (imp_i (not A') (not A) (pNA' : (Prf (not A')) => (neg_i A (pA : (Prf A) => (neg_e A' pNA' (imp_e A A' (and_el (imp A A') (imp A' A) pAA') pA)))))))))).

thm iff_all : (a : Set -> (A : ((El a) -> Prop) -> (A' : ((El a) -> Prop) -> ((x : (El a) -> (Prf (iff (A x) (A' x)))) -> (Prf (iff (all a A) (all a A'))))))) 
:= (a : Set => (A : ((El a) -> Prop) => (A' : ((El a) -> Prop) => (pAA' : (x : (El a) -> (Prf (iff (A x) (A' x)))) => (and_i 
    (imp (all a A) (all a A')) 
    (imp_i (all a A) (all a A') (pFA : (Prf (all a A)) => (all_i a A' (x : (El a) => (imp_e (A x) (A' x) 
        (and_el (imp (A x) (A' x)) (imp (A' x) (A x)) (pAA' x)) 
        (all_e a A pFA x)))))) 
    (imp (all a A') (all a A)) 
    (imp_i (all a A') (all a A) (pFA' : (Prf (all a A')) => (all_i a A (x : (El a) => (imp_e (A' x) (A x) 
        (and_er (imp (A x) (A' x)) (imp (A' x) (A x)) (pAA' x)) 
        (all_e a A' pFA' x))))))))))).

thm iff_ex : (a : Set -> (A : ((El a) -> Prop) -> (A' : ((El a) -> Prop) -> ((x : (El a) -> (Prf (iff (A x) (A' x)))) -> (Prf (iff (ex a A) (ex a A'))))))) 
:= (a : Set => (A : ((El a) -> Prop) => (A' : ((El a) -> Prop) => (pAA' : (x : (El a) -> (Prf (iff (A x) (A' x)))) => (and_i 
    (imp (ex a A) (ex a A')) 
    (imp_i (ex a A) (ex a A') (pEA : (Prf (ex a A)) => (ex_e a A pEA (ex a A') (t : (El a) => (pAt : (Prf (A t)) => (ex_i a A' t (imp_e 
        (A t) 
        (A' t) 
        (and_el (imp (A t) (A' t)) (imp (A' t) (A t)) (pAA' t)) 
        pAt))))))) 
    (imp (ex a A') (ex a A)) 
    (imp_i (ex a A') (ex a A) (pEA' : (Prf (ex a A')) => (ex_e a A' pEA' (ex a A) (t : (El a) => (pAt' : (Prf (A' t)) => (ex_i a A t (imp_e 
        (A' t) 
        (A t) 
        (and_er (imp (A t) (A' t)) (imp (A' t) (A t)) (pAA' t)) 
        pAt')))))))))))).

thm iff_iff : (A : Prop -> (A' : Prop -> (B : Prop -> (B' : Prop -> ((Prf (iff A A')) -> ((Prf (iff B B')) -> (Prf (iff (iff A B) (iff A' B'))))))))) 
:= (A : Prop => (A' : Prop => (B : Prop => (B' : Prop => (pAA' : (Prf (iff A A')) => (pBB' : (Prf (iff B B')) => (and_i 
    (imp (iff A B) (iff A' B')) 
    (imp_i (iff A B) (iff A' B') (pAB : (Prf (iff A B)) => (and_i 
        (imp A' B') 
        (imp_i A' B' (pA' : (Prf A') => (imp_e B B' 
            (and_el (imp B B') (imp B' B) pBB') 
            (imp_e A B (and_el (imp A B) (imp B A) pAB) (imp_e A' A (and_er (imp A A') (imp A' A) pAA') pA'))))) 
        (imp B' A') 
        (imp_i B' A' (pB' : (Prf B') => (imp_e A A' 
            (and_el (imp A A') (imp A' A) pAA') 
            (imp_e B A (and_er (imp A B) (imp B A) pAB) (imp_e B' B (and_er (imp B B') (imp B' B) pBB') pB')))))))) 
    (imp (iff A' B') (iff A B)) 
    (imp_i (iff A' B') (iff A B) (pAB' : (Prf (iff A' B')) => (and_i (imp A B) (imp_i A B (pA : (Prf A) => (imp_e B' B (and_er (imp B B') (imp B' B) pBB') (imp_e A' B' (and_el (imp A' B') (imp B' A') pAB') (imp_e A A' (and_el (imp A A') (imp A' A) pAA') pA))))) (imp B A) (imp_i B A (pB : (Prf B) => (imp_e A' A (and_er (imp A A') (imp A' A) pAA') (imp_e B' A' (and_er (imp A' B') (imp B' A') pAB') (imp_e B B' (and_el (imp B B') (imp B' B) pBB') pB))))))))))))))).

thm double_neg : (A : Prop -> (Prf (imp A (not (not A))))) 
:= (A : Prop => (imp_i A (not (not A)) (pA : (Prf A) => (neg_i (not A) (pNA : (Prf (not A)) => (neg_e A pNA pA)))))).

thm neg_imp : (p : Prop -> (q : Prop -> (Prf (imp (imp p q) (imp (not q) (not p)))))) 
:= (p : Prop => (q : Prop => (imp_i 
    (imp p q) 
    (imp (not q) (not p)) 
    (pPQ : (Prf (imp p q)) => (imp_i (not q) (not p) (pNQ : (Prf (not q)) => (neg_i p (pP : (Prf p) => (neg_e q pNQ (imp_e p q pPQ pP)))))))))).

thm neg_imp1 : (p : Prop -> (q : Prop -> (Prf (imp (imp (not (not p)) (not (not q))) (not (not (imp p q))))))) 
:= (p : Prop => (q : Prop => (imp_i 
    (imp (not (not p)) (not (not q))) 
    (not (not (imp p q))) 
    (pPQ : (Prf (imp (not (not p)) (not (not q)))) => (neg_i 
        (not (imp p q)) 
        (pNPQ : (Prf (not (imp p q))) => (neg_e (imp p q) pNPQ (imp_i p q 
            (pP : (Prf p) => (bot_e 
                (neg_e 
                    (not q) 
                    (imp_e (not (not p)) (not (not q)) pPQ (imp_e p (not (not p)) (double_neg p) pP)) 
                    (neg_i q (pQ : (Prf q) => (neg_e (imp p q) pNPQ (imp_i p q (pP2 : (Prf p) => pQ)))))) 
                q)))))))))).

thm neg_imp2 : (p : Prop -> (q : Prop -> (Prf (imp (not (not (imp p q))) (imp (not (not p)) (not (not q))))))) 
:= (p : Prop => (q : Prop => (imp_i 
    (not (not (imp p q))) 
    (imp (not (not p)) (not (not q))) 
    (pNNPQ : (Prf (not (not (imp p q)))) => (imp_i 
        (not (not p)) 
        (not (not q)) 
        (pNNP : (Prf (not (not p))) => (neg_i (not q) (pNQ : (Prf (not q)) => (neg_e 
            (not (imp p q)) 
            pNNPQ 
            (neg_i (imp p q) (pPQ : (Prf (imp p q)) => (neg_e 
                (not p) 
                pNNP 
                (neg_i p (pP : (Prf p) => (neg_e q pNQ (imp_e p q pPQ pP)))))))))))))))).

thm neg_and1 : (p : Prop -> (q : Prop -> (Prf (imp (and (not (not p)) (not (not q))) (not (not (and p q))))))) 
:= (p : Prop => (q : Prop => (imp_i 
    (and (not (not p)) (not (not q))) 
    (not (not (and p q))) 
    (pNNPQ : (Prf (and (not (not p)) (not (not q)))) => (neg_i 
        (not (and p q)) 
        (pNPQ : (Prf (not (and p q))) => (neg_e 
            (not q) 
            (and_er (not (not p)) (not (not q)) pNNPQ) 
            (neg_i q (pQ : (Prf q) => (neg_e 
                (not p) 
                (and_el (not (not p)) (not (not q)) pNNPQ) 
                (neg_i p (pP : (Prf p) => (neg_e (and p q) pNPQ (and_i p pP q pQ)))))))))))))).

thm neg_and2 : (p : Prop -> (q : Prop -> (Prf (imp (not (not (and p q))) (and (not (not p)) (not (not q))))))) 
:= (p : Prop => (q : Prop => (imp_i 
    (not (not (and p q))) 
    (and (not (not p)) (not (not q))) 
    (pNNPQ : (Prf (not (not (and p q)))) => (and_i 
        (not (not p)) 
        (neg_i (not p) (pNP : (Prf (not p)) => (neg_e 
            (not (and p q)) 
            pNNPQ 
            (neg_i (and p q) (pPQ : (Prf (and p q)) => (neg_e p pNP (and_el p q pPQ))))))) 
        (not (not q)) 
        (neg_i (not q) (pNQ : (Prf (not q)) => (neg_e 
            (not (and p q)) 
            pNNPQ 
            (neg_i (and p q) (pPQ : (Prf (and p q)) => (neg_e q pNQ (and_er p q pPQ)))))))))))).

thm neg_or1 : (p : Prop -> (q : Prop -> (Prf (imp (not (or p q)) (and (not p) (not q)))))) 
:= (p : Prop => (q : Prop => (imp_i 
    (not (or p q)) 
    (and (not p) (not q)) 
    (pNPQ : (Prf (not (or p q))) => (and_i 
        (not p) 
        (neg_i p (pP : (Prf p) => (neg_e (or p q) pNPQ (or_il p pP q)))) 
        (not q) 
        (neg_i q (pQ : (Prf q) => (neg_e (or p q) pNPQ (or_ir p q pQ))))))))).

thm neg_or2 : (p : Prop -> (q : Prop -> (Prf (imp (and (not p) (not q)) (not (or p q)))))) 
:= (p : Prop => (q : Prop => (imp_i 
    (and (not p) (not q)) 
    (not (or p q)) 
    (pNPQ : (Prf (and (not p) (not q))) => (neg_i (or p q) (pPQ : (Prf (or p q)) => (or_e p q pPQ bot 
        (pP : (Prf p) => (neg_e p (and_el (not p) (not q) pNPQ) pP)) 
        (pQ : (Prf q) => (neg_e q (and_er (not p) (not q) pNPQ) pQ))))))))).

thm neg_all : (a : Set -> (p : ((El a) -> Prop) -> (Prf (imp (not (not (all a p))) (all a (x : (El a) => (not (not (p x))))))))) 
:= (a : Set => (p : ((El a) -> Prop) => (imp_i 
    (not (not (all a p))) 
    (all a (x : (El a) => (not (not (p x))))) 
    (pNNP : (Prf (not (not (all a p)))) => (all_i a 
        (x : (El a) => (not (not (p x)))) 
        (x : (El a) => (neg_i (not (p x)) (pNP : (Prf (not (p x))) => (neg_e 
            (not (all a p)) 
            pNNP 
            (neg_i (all a p) (pP : (Prf (all a p)) => (neg_e (p x) pNP (all_e a p pP x))))))))))))).

thm neg_ex1 : (a : Set -> (p : ((El a) -> Prop) -> (Prf (imp (not (ex a p)) (all a (x : (El a) => (not (p x)))))))) 
:= (a : Set => (p : ((El a) -> Prop) => (imp_i 
    (not (ex a p)) 
    (all a (x : (El a) => (not (p x)))) 
    (pNP : (Prf (not (ex a p))) => (all_i a 
        (x : (El a) => (not (p x))) 
        (x : (El a) => (neg_i (p x) (pP : (Prf (p x)) => (neg_e (ex a p) pNP (ex_i a p x pP)))))))))).

thm neg_ex2 : (a : Set -> (p : ((El a) -> Prop) -> (Prf (imp (all a (x : (El a) => (not (p x)))) (not (ex a p)))))) 
:= (a : Set => (p : ((El a) -> Prop) => (imp_i 
    (all a (x : (El a) => (not (p x)))) 
    (not (ex a p)) 
    (pNP : (Prf (all a (x : (El a) => (not (p x))))) => (neg_i 
        (ex a p) 
        (pP : (Prf (ex a p)) => (ex_e a p pP bot (t : (El a) => (pPt : (Prf (p t)) => (neg_e 
            (p t) 
            (all_e a (x : (El a) => (not (p x))) pNP t) 
            pPt)))))))))).

thm triple_neg : (p : Prop -> (Prf (imp (not (not (not p))) (not p)))) 
:= (p : Prop => (imp_i 
    (not (not (not p))) 
    (not p) 
    (pNNNP : (Prf (not (not (not p)))) => (neg_i p (pP : (Prf p) => (neg_e 
        (not (not p)) 
        pNNNP 
        (imp_e p (not (not p)) (double_neg p) pP))))))).

thm neg_bot : (Prf (imp (not (not bot)) bot)) 
:= (imp_i 
    (not (not bot)) 
    bot 
    (pB : (Prf (not (not bot))) => (neg_e (not bot) pB (neg_i bot (pN : (Prf bot) => pN))))).

thm neg_top : (Prf (imp (not (not top)) top)) 
:= (imp_i (not (not top)) top (pT : (Prf (not (not top))) => top_i)).

thm neg_iff : (p : Prop -> (q : Prop -> (Prf (imp (iff (not (not p)) (not (not q))) (not (not (iff p q))))))) 
:= (p : Prop => (q : Prop => (imp_i 
    (iff (not (not p)) (not (not q))) 
    (not (not (iff p q))) 
    (pH : (Prf (iff (not (not p)) (not (not q)))) => (imp_e 
        (and (not (not (imp p q))) (not (not (imp q p)))) 
        (not (not (and (imp p q) (imp q p)))) 
        (neg_and1 (imp p q) (imp q p)) 
        (and_i (not (not (imp p q))) 
            (imp_e 
                (imp (not (not p)) (not (not q))) 
                (not (not (imp p q))) 
                (neg_imp1 p q) 
                (and_el (imp (not (not p)) (not (not q))) (imp (not (not q)) (not (not p))) pH)) 
            (not (not (imp q p))) 
            (imp_e 
                (imp (not (not q)) (not (not p))) 
                (not (not (imp q p))) 
                (neg_imp1 q p) 
                (and_er (imp (not (not p)) (not (not q))) (imp (not (not q)) (not (not p))) pH)))))))).


(; Classical results ;)

thm double_neg_elim : (A : Prop -> (Prf (imp (not (not A)) A))) 
:= (A : Prop => (imp_i 
    (not (not A)) 
    A 
    (pNNA : (Prf (not (not A))) => (or_e A 
        (not A) 
        (pem A)
        A 
        (pA : (Prf A) => pA) 
        (pNA : (Prf (not A)) => (bot_e (neg_e (not A) pNNA pNA) A)))))).

thm double_neg_iff : (A : Prop -> (Prf (iff A (not (not A))))) 
:= (A : Prop => (and_i 
    (imp A (not (not A))) 
    (double_neg A) 
    (imp (not (not A)) A) 
    (double_neg_elim A))).

thm absurd : (A : Prop -> (((Prf (not A)) -> (Prf bot)) -> (Prf A))) 
:= (A : Prop => (pNPF : ((Prf (not A)) -> (Prf bot)) => (imp_e 
    (not (not A)) 
    A 
    (double_neg_elim A) 
    (neg_i (not A) pNPF)))).

thm clavius : (Prf (all o (A : (El o) => (imp (imp (not A) A) A)))) 
:= (all_i o 
    (A : (El o) => (imp (imp (not A) A) A)) 
    (A : Prop => (imp_i 
        (imp (not A) A) 
        A 
        (pNAA : (Prf (imp (not A) A)) => (or_e A (not A) (pem A) A 
            (pA : (Prf A) => pA) 
            (pNA : (Prf (not A)) => (imp_e (not A) A pNAA pNA))))))).

thm tarski : (Prf (all o (A : (El o) => (all o (B : (El o) => (or A (imp A B))))))) 
:= (all_i o 
    (A : (El o) => (all o (B : (El o) => (or A (imp A B))))) 
    (A : Prop => (all_i o 
        (B : (El o) => (or A (imp A B))) 
        (B : Prop => (or_e A (not A) (pem A) (or A (imp A B)) 
            (pA : (Prf A) => (or_il A pA (imp A B))) 
            (pNA : (Prf (not A)) => (or_ir A (imp A B) (imp_i A B (pA : (Prf A) => (bot_e (neg_e A pNA pA) B)))))))))).

thm weak_peirce : (Prf (all o (A : (El o) => (imp (imp (imp A bot) A) A)))) 
:= (all_i o 
    (A : (El o) => (imp (imp (imp A bot) A) A)) 
    (A : Prop => (imp_i (imp (imp A bot) A) A (pAFA : (Prf (imp (imp A bot) A)) => (or_e A (not A) (pem A) A 
        (pA : (Prf A) => pA) 
        (pNA : (Prf (not A)) => (imp_e (imp A bot) A pAFA (imp_i A bot (pA : (Prf A) => (neg_e A pNA pA)))))))))).

thm peirce : (Prf (all o (A : (El o) => (all o (B : (El o) => (imp (imp (imp A B) A) A)))))) 
:= (all_i o 
    (A : (El o) => (all o (B : (El o) => (imp (imp (imp A B) A) A)))) 
    (A : Prop => (all_i o (B : (El o) => (imp (imp (imp A B) A) A)) (B : Prop => (imp_i (imp (imp A B) A) A 
        (pABA : (Prf (imp (imp A B) A)) => (imp_e 
            (imp (imp A bot) A) 
            A 
            (all_e o (A1 : (El o) => (imp (imp (imp A1 bot) A1) A1)) weak_peirce A) 
            (imp_i (imp A bot) A (pAF : (Prf (imp A bot)) => (imp_e 
                (imp A B) 
                A 
                pABA 
                (imp_i A B (pA : (Prf A) => (bot_e (imp_e A bot pAF pA) B))))))))))))).

thm linearity : (Prf (all o (A : (El o) => (all o (B : (El o) => (all o (C : (El o) => (or (imp A B) (imp B C))))))))) 
:= (all_i o 
    (A : (El o) => (all o (B : (El o) => (all o (C : (El o) => (or (imp A B) (imp B C))))))) 
    (A : Prop => (all_i o 
        (B : (El o) => (all o (C : (El o) => (or (imp A B) (imp B C))))) 
        (B : Prop => (all_i o 
            (C : (El o) => (or (imp A B) (imp B C))) 
            (C : Prop => (or_e B (imp B C) 
                (all_e o 
                    (C1 : (El o) => (or B (imp B C1))) 
                    (all_e o (B1 : (El o) => (all o (C1 : (El o) => (or B1 (imp B1 C1))))) tarski B) C) 
                (or (imp A B) (imp B C)) 
                (pB : (Prf B) => (or_il (imp A B) (imp_i A B (pA : (Prf A) => pB)) (imp B C))) 
                (pBC : (Prf (imp B C)) => (or_ir (imp A B) (imp B C) pBC))))))))).

thm weak_linearity : (Prf (all o (A : (El o) => (all o (B : (El o) => (or (imp A B) (imp B A))))))) 
:= (all_i o 
    (A : (El o) => (all o (B : (El o) => (or (imp A B) (imp B A))))) 
    (A : Prop => (all_i o 
        (B : (El o) => (or (imp A B) (imp B A))) 
        (B : Prop => (all_e o 
            (C : (El o) => (or (imp A B) (imp B C))) 
            (all_e o 
                (B1 : (El o) => (all o (C : (El o) => (or (imp A B1) (imp B1 C))))) 
                (all_e o 
                    (A1 : (El o) => (all o (B1 : (El o) => (all o (C : (El o) => (or (imp A1 B1) (imp B1 C))))))) 
                    linearity A)
                B) 
            A))))).

thm weak_excluded_middle : (Prf (all o (A : (El o) => (or (not A) (not (not A)))))) 
:= (all_i o (A : (El o) => (or (not A) (not (not A)))) (A : Prop => (pem (not A)))).

thm non_contradiction : (Prf (all o (A : (El o) => (not (and A (not A)))))) 
:= (all_i o 
    (A : (El o) => (not (and A (not A)))) 
    (A : Prop => (neg_i (and A (not A)) (pANA : (Prf (and A (not A))) => (imp_e A bot 
        (imp_i A bot (neg_e A (and_er A (not A) pANA))) 
        (and_el A (not A) pANA)))))).

thm entailment : (Prf (all o (A : (El o) => (all o (B : (El o) => (imp (and A (not A)) B)))))) 
:= (all_i o 
    (A : (El o) => (all o (B : (El o) => (imp (and A (not A)) B)))) 
    (A : Prop => (all_i o 
        (B : (El o) => (imp (and A (not A)) B)) 
        (B : Prop => (imp_i (and A (not A)) B (pANA : (Prf (and A (not A))) => (bot_e 
            (imp_e A bot 
                (imp_i A bot (neg_e A (and_er A (not A) pANA))) 
                (and_el A (not A) pANA)) 
            B))))))).


(; De Morgan's laws ;)

thm demorgan_and : (A : Prop -> (B : Prop -> (Prf (iff (not (and A B)) (or (not A) (not B)))))) 
:= (A : Prop => (B : Prop => (and_i 
    (imp (not (and A B)) (or (not A) (not B))) 
    (imp_i (not (and A B)) (or (not A) (not B)) (pNAB : (Prf (not (and A B))) => (imp_e 
        (not (not (or (not A) (not B)))) 
        (or (not A) (not B)) 
        (double_neg_elim (or (not A) (not B))) 
        (neg_i (not (or (not A) (not B))) (pNNANB : (Prf (not (or (not A) (not B)))) => (neg_e (and A B) pNAB (and_i 
            A 
            (imp_e (not (not A)) A (double_neg_elim A) (neg_i (not A) (pNA : (Prf (not A)) => (neg_e 
                (or (not A) (not B)) 
                pNNANB 
                (or_il (not A) pNA (not B)))))) 
            B 
            (imp_e (not (not B)) B (double_neg_elim B) (neg_i (not B) (pNB : (Prf (not B)) => (neg_e 
                (or (not A) (not B)) 
                pNNANB 
                (or_ir (not A) (not B) pNB)))))))))))) 
    (imp (or (not A) (not B)) (not (and A B))) 
    (imp_i (or (not A) (not B)) (not (and A B)) (pNANB : (Prf (or (not A) (not B))) => (neg_i 
        (and A B) 
        (pAB : (Prf (and A B)) => (or_e (not A) (not B) pNANB bot 
            (pNA : (Prf (not A)) => (neg_e A pNA (and_el A B pAB))) 
            (pNB : (Prf (not B)) => (neg_e B pNB (and_er A B pAB))))))))))).

thm demorgan_or : (A : Prop -> (B : Prop -> (Prf (iff (not (or A B)) (and (not A) (not B)))))) 
:= (A : Prop => (B : Prop => (and_i 
    (imp (not (or A B)) (and (not A) (not B))) 
    (neg_or1 A B) 
    (imp (and (not A) (not B)) (not (or A B))) 
    (neg_or2 A B)))).

thm demorgan_neg_and : (A : Prop -> (B : Prop -> (Prf (iff (not (and (not A) (not B))) (or A B))))) 
:= (A : Prop => (B : Prop => (iff_trans_rule 
    (not (and (not A) (not B))) 
    (or (not (not A)) (not (not B))) 
    (or A B) 
    (demorgan_and (not A) (not B)) 
    (iff_or (not (not A)) A (not (not B)) B 
        (iff_sym_rule A (not (not A)) (double_neg_iff A)) 
        (iff_sym_rule B (not (not B)) (double_neg_iff B)))))).

thm demorgan_neg_or : (A : Prop -> (B : Prop -> (Prf (iff (not (or (not A) (not B))) (and A B))))) 
:= (A : Prop => (B : Prop => (iff_trans_rule 
    (not (or (not A) (not B))) 
    (and (not (not A)) (not (not B))) 
    (and A B) 
    (demorgan_or (not A) (not B)) 
    (iff_and (not (not A)) A (not (not B)) B 
        (iff_sym_rule A (not (not A)) (double_neg_iff A)) 
        (iff_sym_rule B (not (not B)) (double_neg_iff B)))))).

thm demorgan_all : (a : Set -> (p : ((El a) -> Prop) -> (Prf (iff (not (all a p)) (ex a (x : (El a) => (not (p x)))))))) 
:= (a : Set => (p : ((El a) -> Prop) => (and_i 
    (imp (not (all a p)) (ex a (x : (El a) => (not (p x))))) 
    (imp_i (not (all a p)) (ex a (x : (El a) => (not (p x)))) (pNFP : (Prf (not (all a p))) => (imp_e 
        (not (not (ex a (x : (El a) => (not (p x)))))) 
        (ex a (x : (El a) => (not (p x)))) 
        (double_neg_elim (ex a (x : (El a) => (not (p x))))) 
        (neg_i (not (ex a (x : (El a) => (not (p x))))) (pNENP : (Prf (not (ex a (x : (El a) => (not (p x)))))) => (neg_e (all a p) pNFP (all_i a p (t : (El a) => (imp_e 
            (not (not (p t))) 
            (p t) 
            (double_neg_elim (p t)) 
            (neg_i (not (p t)) (pNPt : (Prf (not (p t))) => (neg_e 
                (ex a (x : (El a) => (not (p x)))) 
                pNENP 
                (ex_i a (x : (El a) => (not (p x))) t pNPt))))))))))))) 
    (imp (ex a (x : (El a) => (not (p x)))) (not (all a p))) 
    (imp_i (ex a (x : (El a) => (not (p x)))) (not (all a p)) (pENP : (Prf (ex a (x : (El a) => (not (p x))))) => (neg_i (all a p) (pFP : (Prf (all a p)) => (ex_e a 
        (x : (El a) => (not (p x))) 
        pENP 
        bot 
        (t : (El a) => (pNPt : (Prf (not (p t))) => (neg_e (p t) pNPt (all_e a p pFP t)))))))))))).

thm demorgan_ex : (a : Set -> (p : ((El a) -> Prop) -> (Prf (iff (not (ex a p)) (all a (x : (El a) => (not (p x)))))))) 
:= (a : Set => (p : ((El a) -> Prop) => (and_i 
    (imp (not (ex a p)) (all a (x : (El a) => (not (p x))))) 
    (neg_ex1 a p) 
    (imp (all a (x : (El a) => (not (p x)))) (not (ex a p))) 
    (neg_ex2 a p)))).

thm demorgan_neg_all : (a : Set -> (p : ((El a) -> Prop) -> (Prf (iff (not (all a (x : (El a) => (not (p x))))) (ex a p))))) 
:= (a : Set => (p : ((El a) -> Prop) => (iff_trans_rule 
    (not (all a (x : (El a) => (not (p x))))) 
    (ex a (x : (El a) => (not (not (p x))))) 
    (ex a p) 
    (demorgan_all a (x : (El a) => (not (p x)))) 
    (iff_ex a (x : (El a) => (not (not (p x)))) p (x : (El a) => (iff_sym_rule 
        (p x) 
        (not (not (p x))) 
        (double_neg_iff (p x)))))))).

thm demorgan_neg_ex : (a : Set -> (p : ((El a) -> Prop) -> (Prf (iff (not (ex a (x : (El a) => (not (p x))))) (all a p))))) 
:= (a : Set => (p : ((El a) -> Prop) => (iff_trans_rule 
    (not (ex a (x : (El a) => (not (p x))))) 
    (all a (x : (El a) => (not (not (p x))))) 
    (all a p) 
    (demorgan_ex a (x : (El a) => (not (p x)))) 
    (iff_all a (x : (El a) => (not (not (p x)))) p (x : (El a) => (iff_sym_rule 
        (p x) 
        (not (not (p x))) 
        (double_neg_iff (p x)))))))).


(; Polymorphic equality  ;)

def eq : (a : Set -> ((El a) -> ((El a) -> Prop))).

[a, x, y] Prf (eq a x y) --> (P : ((El a) -> Prop) -> ((Prf (P x)) -> (Prf (P y)))).

thm eq_refl_rule : (a : Set -> (x : (El a) -> (Prf (eq a x x)))) 
:= (a : Set => (x : (El a) => (P : ((El a) -> Prop) => (Py : (Prf (P x)) => Py)))).

thm eq_refl : (a : Set -> (Prf (all a (x : (El a) => (eq a x x))))) 
:= (a : Set => (all_i a (x : (El a) => (eq a x x)) (x : (El a) => (eq_refl_rule a x)))).

thm eq_sym_rule : (a : Set -> (x : (El a) -> (y : (El a) -> ((Prf (eq a x y)) -> (Prf (eq a y x)))))) 
:= (a : Set => (x : (El a) => (y : (El a) => (Pxy : (Prf (eq a x y)) => 
    (P : ((El a) -> Prop) => (imp_e (P y) (P x) 
        (Pxy (z : (El a) => (imp (P z) (P x))) (imp_i (P x) (P x) (Px : (Prf (P x)) => Px))))))))).

thm eq_sym : (a : Set -> (Prf (all a (x : (El a) => (all a (y : (El a) => (imp (eq a x y) (eq a y x)))))))) 
:= (a : Set => (all_i a 
    (x : (El a) => (all a (y : (El a) => (imp (eq a x y) (eq a y x))))) 
    (x : (El a) => (all_i a 
        (y : (El a) => (imp (eq a x y) (eq a y x))) 
        (y : (El a) => (imp_i (eq a x y) (eq a y x) (eq_sym_rule a x y))))))).

thm eq_trans_rule : (a : Set -> (x : (El a) -> (y : (El a) -> (z : (El a) -> ((Prf (eq a x y)) -> ((Prf (eq a y z)) -> (Prf (eq a x z)))))))) 
:= (a : Set => (x : (El a) => (y : (El a) => (z : (El a) => (Pxy : (Prf (eq a x y)) => 
    (Pyz : (Prf (eq a y z)) => (P : ((El a) -> Prop) => (Px : (Prf (P x)) => (Pyz P (Pxy P Px)))))))))).

thm eq_trans : (a : Set -> (Prf (all a (x : (El a) => (all a (y : (El a) => (all a (z : (El a) => (imp (and (eq a x y) (eq a y z)) (eq a x z)))))))))) 
:= (a : Set => (all_i a 
    (x : (El a) => (all a (y : (El a) => (all a (z : (El a) => (imp (and (eq a x y) (eq a y z)) (eq a x z))))))) 
    (x : (El a) => (all_i a 
        (y : (El a) => (all a (z : (El a) => (imp (and (eq a x y) (eq a y z)) (eq a x z))))) 
        (y : (El a) => (all_i a 
            (z : (El a) => (imp (and (eq a x y) (eq a y z)) (eq a x z))) 
            (z : (El a) => (imp_i 
                (and (eq a x y) (eq a y z)) 
                (eq a x z) 
                (Pxyz : (Prf (and (eq a x y) (eq a y z))) => (eq_trans_rule a x y z 
                    (and_el (eq a x y) (eq a y z) Pxyz) 
                    (and_er (eq a x y) (eq a y z) Pxyz))))))))))).

thm eq_fun_rule : (a : Set -> (b : Set -> (f : ((El a) -> (El b)) -> (x : (El a) -> (y : (El a) -> ((Prf (eq a x y)) -> (Prf (eq b (f x) (f y))))))))) 
:= (a : Set => (b : Set => (f : ((El a) -> (El b)) => (x : (El a) => (y : (El a) => 
    (Pxy : (Prf (eq a x y)) => (P : ((El b) -> Prop) => (Pxy (w : (El a) => (P (f w))))))))))).

thm eq_fun : (a : Set -> (b : Set -> (Prf (all (fun a b) (f : ((El a) -> (El b)) => (all a (x : (El a) => (all a (y : (El a) => (imp (eq a x y) (eq b (f x) (f y)))))))))))) 
:= (a : Set => (b : Set => (all_i (fun a b) 
    (f : ((El a) -> (El b)) => (all a (x : (El a) => (all a (y : (El a) => (imp (eq a x y) (eq b (f x) (f y)))))))) 
    (f : ((El a) -> (El b)) => (all_i a 
        (x : (El a) => (all a (y : (El a) => (imp (eq a x y) (eq b (f x) (f y)))))) 
        (x : (El a) => (all_i a 
            (y : (El a) => (imp (eq a x y) (eq b (f x) (f y)))) 
            (y : (El a) => (imp_i (eq a x y) (eq b (f x) (f y)) (Pxy : (Prf (eq a x y)) => (eq_fun_rule a b f x y Pxy))))))))))).

thm eq_fun2 : (a1 : Set -> (a2 : Set -> (b : Set -> (Prf (all (fun a1 (fun a2 b)) (f : ((El a1) -> ((El a2) -> (El b))) => (all a1 (x1 : (El a1) => (all a2 (x2 : (El a2) => (all a1 (y1 : (El a1) => (all a2 (y2 : (El a2) => (imp (eq a1 x1 y1) (imp (eq a2 x2 y2) (eq b (f x1 x2) (f y1 y2)))))))))))))))))) 
:= (a1 : Set => (a2 : Set => (b : Set => (all_i (fun a1 (fun a2 b)) 
    (f : ((El a1) -> ((El a2) -> (El b))) => (all a1 
        (x1 : (El a1) => (all a2 (x2 : (El a2) => 
            (all a1 (y1 : (El a1) => (all a2 (y2 : (El a2) => 
                (imp (eq a1 x1 y1) (imp (eq a2 x2 y2) (eq b (f x1 x2) (f y1 y2))))))))))))) 
    (f : ((El a1) -> ((El a2) -> (El b))) => (all_i a1 
        (x1 : (El a1) => (all a2 (x2 : (El a2) => 
            (all a1 (y1 : (El a1) => (all a2 (y2 : (El a2) => 
                (imp (eq a1 x1 y1) (imp (eq a2 x2 y2) (eq b (f x1 x2) (f y1 y2))))))))))) 
        (x1 : (El a1) => (all_i a2 
            (x2 : (El a2) => (all a1 (y1 : (El a1) => (all a2 (y2 : (El a2) => 
                (imp (eq a1 x1 y1) (imp (eq a2 x2 y2) (eq b (f x1 x2) (f y1 y2))))))))) 
            (x2 : (El a2) => (all_i a1 
                (y1 : (El a1) => (all a2 (y2 : (El a2) => (imp (eq a1 x1 y1) (imp (eq a2 x2 y2) (eq b (f x1 x2) (f y1 y2))))))) 
                (y1 : (El a1) => (all_i a2 
                    (y2 : (El a2) => (imp (eq a1 x1 y1) (imp (eq a2 x2 y2) (eq b (f x1 x2) (f y1 y2))))) 
                    (y2 : (El a2) => (imp_i 
                        (eq a1 x1 y1) 
                        (imp (eq a2 x2 y2) (eq b (f x1 x2) (f y1 y2))) 
                        (Pxy1 : (Prf (eq a1 x1 y1)) => (imp_i 
                            (eq a2 x2 y2) 
                            (eq b (f x1 x2) (f y1 y2)) 
                            (Pxy2 : (Prf (eq a2 x2 y2)) => (P : ((El b) -> Prop) => (Pfx : (Prf (P (f x1 x2))) => 
                                (Pxy1 (w : (El a1) => (P (f w y2))) (Pxy2 (w : (El a2) => (P (f x1 w))) Pfx))))))))))))))))))))).

thm eq_comp : (a : Set -> (b : Set -> (c : Set -> (Prf (all (fun b c) (f : ((El b) -> (El c)) => (all (fun a b) (g : ((El a) -> (El b)) => (all a (x : (El a) => (all a (y : (El a) => (imp (eq a x y) (eq c (f (g x)) (f (g y)))))))))))))))) 
:= (a : Set => (b : Set => (c : Set => (all_i (fun b c) 
    (f : ((El b) -> (El c)) => (all (fun a b) (g : ((El a) -> (El b)) => 
        (all a (x : (El a) => (all a (y : (El a) => (imp (eq a x y) (eq c (f (g x)) (f (g y))))))))))) 
    (f : ((El b) -> (El c)) => (all_i (fun a b) 
        (g : ((El a) -> (El b)) => (all a (x : (El a) => (all a (y : (El a) => (imp (eq a x y) (eq c (f (g x)) (f (g y))))))))) 
        (g : ((El a) -> (El b)) => (all_e (fun a c) 
            (f1 : ((El a) -> (El c)) => (all a (x : (El a) => (all a (y : (El a) => (imp (eq a x y) (eq c (f1 x) (f1 y)))))))) 
            (eq_fun a c) (w : (El a) => (f (g w))))))))))).


(; Peano arithmetic ;)

nat : Set.
0 : (El nat).
S : ((El nat) -> (El nat)).
def add : ((El nat) -> ((El nat) -> (El nat))).
def mult : ((El nat) -> ((El nat) -> (El nat))).

[x] eq nat (S x) 0 --> bot.
[x, y] eq nat (S x) (S y) --> (eq nat x y).
[x] add x 0 --> x.
[x, y] add x (S y) --> (S (add x y)).
[x] mult x 0 --> 0.
[x, y] mult x (S y) --> (add (mult x y) x).

induction_axiom : (Prf (all (fun nat o) (P : (El (fun nat o)) => (imp (and (P 0) (all nat (n : (El nat) => (imp (P n) (P (S n)))))) (all nat (n : (El nat) => (P n))))))).

thm induction_rule : (P : ((El nat) -> Prop) -> ((Prf (P 0)) -> ((n : (El nat) -> ((Prf (P n)) -> (Prf (P (S n))))) -> (Prf (all nat (n : (El nat) => (P n))))))) 
:= (P : ((El nat) -> Prop) => (H0 : (Prf (P 0)) => (IH : (n : (El nat) -> ((Prf (P n)) -> (Prf (P (S n))))) => (imp_e 
    (and (P 0) (all nat (n : (El nat) => (imp (P n) (P (S n)))))) 
    (all nat (n : (El nat) => (P n))) 
    (all_e (fun nat o) 
        (P1 : (El (fun nat o)) => (imp 
            (and (P1 0) (all nat (n : (El nat) => (imp (P1 n) (P1 (S n)))))) 
            (all nat (n : (El nat) => (P1 n))))) 
        induction_axiom P) 
    (and_i (P 0) H0 
        (all nat (n : (El nat) => (imp (P n) (P (S n))))) 
        (all_i nat (n : (El nat) => (imp (P n) (P (S n)))) (m : (El nat) => (imp_i (P m) (P (S m)) (IH m))))))))).

thm Z_pred : (Prf (all nat (n : (El nat) => (or (eq nat n 0) (ex nat (m : (El nat) => (eq nat n (S m)))))))) 
:= (induction_rule 
    (n : (El nat) => (or (eq nat n 0) (ex nat (m : (El nat) => (eq nat n (S m)))))) 
    (or_il (eq nat 0 0) (eq_refl_rule nat 0) (ex nat (m : (El nat) => (eq nat 0 (S m))))) 
    (n : (El nat) => (pPn : (Prf (or (eq nat n 0) (ex nat (m : (El nat) => (eq nat n (S m)))))) => (or_ir 
        (eq nat (S n) 0) 
        (ex nat (m : (El nat) => (eq nat (S n) (S m)))) 
        (or_e 
            (eq nat n 0) 
            (ex nat (m : (El nat) => (eq nat n (S m)))) 
            pPn 
            (ex nat (m : (El nat) => (eq nat (S n) (S m)))) 
            (pZ : (Prf (eq nat n 0)) => (ex_i nat (m : (El nat) => (eq nat (S n) (S m))) 0 (eq_fun_rule nat nat (w : (El nat) => (S w)) n 0 pZ))) 
            (pEm : (Prf (ex nat (m : (El nat) => (eq nat n (S m))))) => (ex_e nat 
                (m : (El nat) => (eq nat n (S m))) 
                pEm 
                (ex nat (m : (El nat) => (eq nat (S n) (S m)))) 
                (t : (El nat) => (pSt : (Prf (eq nat n (S t))) => (ex_i nat 
                    (m : (El nat) => (eq nat (S n) (S m))) 
                    (S t) 
                    (eq_fun_rule nat nat (w : (El nat) => (S w)) n (S t) pSt))))))))))).

thm add_nZ : (Prf (all nat (n : (El nat) => (eq nat (add n 0) n)))) 
:= (eq_refl nat).

thm add_Zn : (Prf (all nat (n : (El nat) => (eq nat (add 0 n) n)))) 
:= (induction_rule 
    (n : (El nat) => (eq nat (add 0 n) n)) 
    (eq_refl_rule nat 0) 
    (n : (El nat) => (pPn : (Prf (eq nat (add 0 n) n)) => pPn))).

thm add_Sn : (Prf (all nat (n : (El nat) => (all nat (m : (El nat) => (eq nat (add (S n) m) (S (add n m)))))))) 
:= (induction_rule 
    (n : (El nat) => (all nat (m : (El nat) => (eq nat (add (S n) m) (S (add n m)))))) 
    (induction_rule 
        (m : (El nat) => (eq nat (add (S 0) m) (S (add 0 m)))) 
        (eq_refl_rule nat (S 0)) 
        (m : (El nat) => (pPm : (Prf (eq nat (add (S 0) m) (S (add 0 m)))) => pPm))) 
    (n : (El nat) => (pPn : (Prf (all nat (m : (El nat) => (eq nat (add (S n) m) (S (add n m)))))) => (induction_rule 
        (m : (El nat) => (eq nat (add (S (S n)) m) (S (add (S n) m)))) 
        (eq_refl_rule nat (S n)) 
        (m : (El nat) => (pPm : (Prf (eq nat (add (S (S n)) m) (S (add (S n) m)))) => pPm)))))).

thm add_assoc : (Prf (all nat (n : (El nat) => (all nat (m : (El nat) => (all nat (p : (El nat) => (eq nat (add (add n m) p) (add n (add m p)))))))))) 
:= (all_i nat 
    (n : (El nat) => (all nat (m : (El nat) => (all nat (p : (El nat) => (eq nat (add (add n m) p) (add n (add m p)))))))) 
    (n : (El nat) => (all_i nat 
        (m : (El nat) => (all nat (p : (El nat) => (eq nat (add (add n m) p) (add n (add m p)))))) 
        (m : (El nat) => (induction_rule 
            (p : (El nat) => (eq nat (add (add n m) p) (add n (add m p)))) 
            (eq_refl_rule nat (add n m)) 
            (p : (El nat) => (pPp : (Prf (eq nat (add (add n m) p) (add n (add m p)))) => 
                (eq_fun_rule nat nat (w : (El nat) => (S w)) (add (add n m) p) (add n (add m p)) pPp)))))))).

thm add_assoc_rule : (n : (El nat) -> (m : (El nat) -> (p : (El nat) -> (Prf (eq nat (add (add n m) p) (add n (add m p))))))) 
:= (n : (El nat) => (m : (El nat) => (p : (El nat) => (all_e nat 
    (p1 : (El nat) => (eq nat (add (add n m) p1) (add n (add m p1)))) 
    (all_e nat 
        (m1 : (El nat) => (all nat (p1 : (El nat) => (eq nat (add (add n m1) p1) (add n (add m1 p1)))))) 
        (all_e nat (n1 : (El nat) => (all nat (m1 : (El nat) => (all nat (p1 : (El nat) => 
            (eq nat (add (add n1 m1) p1) (add n1 (add m1 p1)))))))) add_assoc n) m) p)))).

thm add_comm : (Prf (all nat (n : (El nat) => (all nat (m : (El nat) => (eq nat (add n m) (add m n))))))) 
:= (induction_rule 
    (n : (El nat) => (all nat (m : (El nat) => (eq nat (add n m) (add m n))))) 
    add_Zn 
    (n : (El nat) => (pPn : (Prf (all nat (m : (El nat) => (eq nat (add n m) (add m n))))) => (all_i nat 
        (m : (El nat) => (eq nat (add (S n) m) (add m (S n)))) 
        (m : (El nat) => (eq_trans_rule nat 
            (add (S n) m) 
            (S (add n m)) 
            (add m (S n)) 
            (all_e nat 
                (m1 : (El nat) => (eq nat (add (S n) m1) (S (add n m1)))) 
                (all_e nat 
                    (n1 : (El nat) => (all nat (m1 : (El nat) => (eq nat (add (S n1) m1) (S (add n1 m1)))))) 
                    add_Sn n) 
                m) 
            (eq_fun_rule nat nat S 
                (add n m) 
                (add m n) 
                (all_e nat (m1 : (El nat) => (eq nat (add n m1) (add m1 n))) pPn m)))))))).

thm add_comm_rule : (n : (El nat) -> (m : (El nat) -> (Prf (eq nat (add n m) (add m n))))) 
:= (n : (El nat) => (m : (El nat) => (all_e nat 
    (m1 : (El nat) => (eq nat (add n m1) (add m1 n))) 
    (all_e nat 
        (n1 : (El nat) => (all nat (m1 : (El nat) => (eq nat (add n1 m1) (add m1 n1))))) 
        add_comm n) 
    m))).

thm add_left_cancel : (Prf (all nat (n : (El nat) => (all nat (m : (El nat) => (imp (eq nat (add m n) m) (eq nat n 0))))))) 
:= (all_i nat 
    (n : (El nat) => (all nat (m : (El nat) => (imp (eq nat (add m n) m) (eq nat n 0))))) 
    (n : (El nat) => (induction_rule 
        (m : (El nat) => (imp (eq nat (add m n) m) (eq nat n 0))) 
        (imp_i (eq nat (add 0 n) 0) (eq nat n 0) (Pn : (Prf (eq nat (add 0 n) 0)) => (all_e nat (x : (El nat) => (eq nat (add 0 x) x)) add_Zn n (w : (El nat) => (eq nat w 0)) Pn))) 
        (m : (El nat) => (Pm : (Prf (imp (eq nat (add m n) m) (eq nat n 0))) => (add_comm_rule n (S m) 
            (w : (El nat) => (imp (eq nat w (S m)) (eq nat n 0))) 
            (add_comm_rule m n (w : (El nat) => (imp (eq nat (S w) (S m)) (eq nat n 0))) Pm))))))).

thm add_left_cancel_rule : (n : (El nat) -> (m : (El nat) -> ((Prf (eq nat (add m n) m)) -> (Prf (eq nat n 0))))) 
:= (n : (El nat) => (m : (El nat) => (imp_e 
    (eq nat (add m n) m) 
    (eq nat n 0) 
    (all_e nat 
        (m1 : (El nat) => (imp (eq nat (add m1 n) m1) (eq nat n 0))) 
        (all_e nat (n1 : (El nat) => (all nat (m1 : (El nat) => (imp (eq nat (add m1 n1) m1) (eq nat n1 0))))) add_left_cancel n) 
        m)))).

thm add_right_cancel_rule : (n : (El nat) -> (m : (El nat) -> ((Prf (eq nat (add n m) m)) -> (Prf (eq nat n 0))))) 
:= (n : (El nat) => (m : (El nat) => (imp_e 
    (eq nat (add n m) m) 
    (eq nat n 0) 
    (add_comm_rule m n 
        (w : (El nat) => (imp (eq nat w m) (eq nat n 0))) 
        (imp_i (eq nat (add m n) m) (eq nat n 0) (add_left_cancel_rule n m)))))).

thm add_left_cancel_Z : (Prf (all nat (n : (El nat) => (all nat (m : (El nat) => (imp (eq nat (add n m) 0) (eq nat n 0))))))) 
:= (all_i nat 
    (n : (El nat) => (all nat (m : (El nat) => (imp (eq nat (add n m) 0) (eq nat n 0))))) 
    (n : (El nat) => (induction_rule 
        (m : (El nat) => (imp (eq nat (add n m) 0) (eq nat n 0))) 
        (imp_i (eq nat (add n 0) 0) (eq nat n 0) (Pn : (Prf (eq nat (add n 0) 0)) => Pn)) 
        (m : (El nat) => (pPm : (Prf (imp (eq nat (add n m) 0) (eq nat n 0))) => (imp_i 
            (eq nat (add n (S m)) 0) 
            (eq nat n 0) 
            (PF : (Prf (eq nat (add n (S m)) 0)) => (bot_e PF (eq nat n 0))))))))).

thm add_left_cancel_Z_rule : (n : (El nat) -> (m : (El nat) -> ((Prf (eq nat (add n m) 0)) -> (Prf (eq nat n 0))))) 
:= (n : (El nat) => (m : (El nat) => (imp_e 
    (eq nat (add n m) 0) 
    (eq nat n 0) 
    (all_e nat 
        (m1 : (El nat) => (imp (eq nat (add n m1) 0) (eq nat n 0))) 
        (all_e nat (n1 : (El nat) => (all nat (m1 : (El nat) => (imp (eq nat (add n1 m1) 0) (eq nat n1 0))))) add_left_cancel_Z n) 
        m)))).

thm add_right_cancel_Z_rule : (n : (El nat) -> (m : (El nat) -> ((Prf (eq nat (add m n) 0)) -> (Prf (eq nat n 0))))) 
:= (n : (El nat) => (m : (El nat) => (imp_e 
    (eq nat (add m n) 0) 
    (eq nat n 0) 
    (add_comm_rule n m 
        (w : (El nat) => (imp (eq nat w 0) (eq nat n 0))) 
        (imp_i (eq nat (add n m) 0) (eq nat n 0) (add_left_cancel_Z_rule n m)))))).

thm mult_nZ : (Prf (all nat (n : (El nat) => (eq nat (mult n 0) 0)))) 
:= (all_i nat (n : (El nat) => (eq nat (mult n 0) 0)) (n : (El nat) => (eq_refl_rule nat 0))).

thm mult_Zn : (Prf (all nat (n : (El nat) => (eq nat (mult 0 n) 0)))) 
:= (induction_rule 
    (n : (El nat) => (eq nat (mult 0 n) 0)) 
    (eq_refl_rule nat 0) 
    (n : (El nat) => (pPn : (Prf (eq nat (mult 0 n) 0)) => pPn))).

thm mult_Sn : (Prf (all nat (n : (El nat) => (all nat (m : (El nat) => (eq nat (mult (S n) m) (add (mult n m) m))))))) 
:= (induction_rule 
    (n : (El nat) => (all nat (m : (El nat) => (eq nat (mult (S n) m) (add (mult n m) m))))) 
    (induction_rule 
        (m : (El nat) => (eq nat (mult (S 0) m) (add (mult 0 m) m))) 
        (eq_refl_rule nat 0) 
        (m : (El nat) => (pPm : (Prf (eq nat (mult (S 0) m) (add (mult 0 m) m))) => pPm))) 
    (n : (El nat) => (pPn : (Prf (all nat (m : (El nat) => (eq nat (mult (S n) m) (add (mult n m) m))))) => (induction_rule 
        (m : (El nat) => (eq nat (mult (S (S n)) m) (add (mult (S n) m) m))) 
        (eq_refl_rule nat 0) 
        (m : (El nat) => (pPm : (Prf (eq nat (mult (S (S n)) m) (add (mult (S n) m) m))) => (eq_sym_rule nat 
            (add (add (mult (S n) m) (S n)) m) 
            (add (mult (S n) m) (add (S n) m)) 
            (add_assoc_rule (mult (S n) m) (S n) m) 
            (w : (El nat) => (eq nat (mult (S (S n)) (S m)) (S w))) 
            (add_comm_rule m (S n) 
                (w : (El nat) => (eq nat (mult (S (S n)) (S m)) (S (add (mult (S n) m) w)))) 
                (eq_trans_rule nat 
                    (mult (S (S n)) (S m)) 
                    (S (add (mult (S n) m) (add m (S n)))) 
                    (S (add (mult (S n) m) (S (add m n)))) 
                    (eq_trans_rule nat 
                        (mult (S (S n)) (S m)) 
                        (S (add (add (mult (S n) m) m) (S n))) 
                        (S (add (mult (S n) m) (add m (S n)))) 
                        (eq_fun_rule nat nat (w : (El nat) => (add w (S (S n)))) (mult (S (S n)) m) (add (mult (S n) m) m) pPm) 
                        (eq_fun_rule nat nat (w : (El nat) => (S w)) 
                            (add (add (mult (S n) m) m) (S n)) 
                            (add (mult (S n) m) (add m (S n))) 
                            (add_assoc_rule (mult (S n) m) m (S n)))) 
                    (eq_refl_rule nat (S (add (mult (S n) m) (add m (S n)))))))))))))).

thm mult_comm : (Prf (all nat (n : (El nat) => (all nat (m : (El nat) => (eq nat (mult n m) (mult m n))))))) 
:= (induction_rule 
    (n : (El nat) => (all nat (m : (El nat) => (eq nat (mult n m) (mult m n))))) 
    mult_Zn 
    (n : (El nat) => (pPn : (Prf (all nat (m : (El nat) => (eq nat (mult n m) (mult m n))))) => (all_i nat 
        (m : (El nat) => (eq nat (mult (S n) m) (mult m (S n)))) 
        (m : (El nat) => (eq_trans_rule nat 
            (mult (S n) m) 
            (add (mult n m) m) 
            (mult m (S n)) 
            (all_e nat 
                (m1 : (El nat) => (eq nat (mult (S n) m1) (add (mult n m1) m1))) 
                (all_e nat 
                    (n1 : (El nat) => (all nat (m1 : (El nat) => (eq nat (mult (S n1) m1) (add (mult n1 m1) m1))))) 
                    mult_Sn n) 
                m) 
            (eq_fun_rule nat nat 
                (w : (El nat) => (add w m)) 
                (mult n m) 
                (mult m n) 
                (all_e nat (m1 : (El nat) => (eq nat (mult n m1) (mult m1 n))) pPn m)))))))).

thm mult_comm_rule : (n : (El nat) -> (m : (El nat) -> (Prf (eq nat (mult n m) (mult m n))))) 
:= (n : (El nat) => (m : (El nat) => (all_e nat 
    (m1 : (El nat) => (eq nat (mult n m1) (mult m1 n))) 
    (all_e nat 
        (n1 : (El nat) => (all nat (m1 : (El nat) => (eq nat (mult n1 m1) (mult m1 n1))))) 
        mult_comm n) 
    m))).

thm distrib_right : (Prf (all nat (n : (El nat) => (all nat (m : (El nat) => (all nat (p : (El nat) => (eq nat (mult (add n m) p) (add (mult n p) (mult m p)))))))))) 
:= (all_i nat 
    (n : (El nat) => (all nat (m : (El nat) => (all nat (p : (El nat) => (eq nat (mult (add n m) p) (add (mult n p) (mult m p)))))))) 
    (n : (El nat) => (all_i nat 
        (m : (El nat) => (all nat (p : (El nat) => (eq nat (mult (add n m) p) (add (mult n p) (mult m p)))))) 
        (m : (El nat) => (induction_rule 
            (p : (El nat) => (eq nat (mult (add n m) p) (add (mult n p) (mult m p)))) 
            (eq_refl_rule nat 0) 
            (p : (El nat) => (pPp : (Prf (eq nat (mult (add n m) p) (add (mult n p) (mult m p)))) => (add_assoc_rule 
                (add (mult n p) n) 
                (mult m p) 
                m 
                (w : (El nat) => (eq nat (mult (add n m) (S p)) w)) 
                (eq_sym_rule nat 
                    (add (add (mult n p) n) (mult m p)) 
                    (add (mult n p) (add n (mult m p))) 
                    (add_assoc_rule (mult n p) n (mult m p)) 
                    (w : (El nat) => (eq nat (mult (add n m) (S p)) (add w m))) 
                    (add_comm_rule (mult m p) n 
                        (w : (El nat) => (eq nat (mult (add n m) (S p)) (add (add (mult n p) w) m))) 
                        (add_assoc_rule (mult n p) (mult m p) n 
                            (w : (El nat) => (eq nat (mult (add n m) (S p)) (add w m))) 
                            (eq_sym_rule nat 
                                (add (add (add (mult n p) (mult m p)) n) m) 
                                (add (add (mult n p) (mult m p)) (add n m)) 
                                (add_assoc_rule (add (mult n p) (mult m p)) n m) 
                                (w : (El nat) => (eq nat (mult (add n m) (S p)) w)) 
                                (pPp (w : (El nat) => (eq nat (mult (add n m) (S p)) (add w (add n m)))) (eq_refl_rule nat (mult (add n m) (S p)))))))))))))))).

thm distrib_right_rule : (n : (El nat) -> (m : (El nat) -> (p : (El nat) -> (Prf (eq nat (mult (add n m) p) (add (mult n p) (mult m p))))))) 
:= (n : (El nat) => (m : (El nat) => (p : (El nat) => (all_e nat 
    (p1 : (El nat) => (eq nat (mult (add n m) p1) (add (mult n p1) (mult m p1)))) 
    (all_e nat 
        (m1 : (El nat) => (all nat (p1 : (El nat) => (eq nat (mult (add n m1) p1) (add (mult n p1) (mult m1 p1)))))) 
        (all_e nat 
            (n1 : (El nat) => (all nat (m1 : (El nat) => (all nat (p1 : (El nat) => (eq nat (mult (add n1 m1) p1) (add (mult n1 p1) (mult m1 p1)))))))) 
            distrib_right n) 
        m) 
    p)))).

thm distrib_left_rule : (n : (El nat) -> (m : (El nat) -> (p : (El nat) -> (Prf (eq nat (mult n (add m p)) (add (mult n m) (mult n p))))))) 
:= (n : (El nat) => (m : (El nat) => (p : (El nat) => (mult_comm_rule (add m p) n 
    (w : (El nat) => (eq nat w (add (mult n m) (mult n p)))) 
    (mult_comm_rule m n 
        (w : (El nat) => (eq nat (mult (add m p) n) (add w (mult n p)))) 
        (mult_comm_rule p n (w : (El nat) => (eq nat (mult (add m p) n) (add (mult m n) w))) (distrib_right_rule m p n))))))).

thm mult_assoc : (Prf (all nat (n : (El nat) => (all nat (m : (El nat) => (all nat (p : (El nat) => (eq nat (mult (mult n m) p) (mult n (mult m p)))))))))) 
:= (all_i nat 
    (n : (El nat) => (all nat (m : (El nat) => (all nat (p : (El nat) => (eq nat (mult (mult n m) p) (mult n (mult m p)))))))) 
    (n : (El nat) => (all_i nat 
        (m : (El nat) => (all nat (p : (El nat) => (eq nat (mult (mult n m) p) (mult n (mult m p)))))) 
        (m : (El nat) => (induction_rule 
            (p : (El nat) => (eq nat (mult (mult n m) p) (mult n (mult m p)))) 
            (eq_refl_rule nat 0) 
            (p : (El nat) => (pPp : (Prf (eq nat (mult (mult n m) p) (mult n (mult m p)))) => (eq_sym_rule nat 
                (mult (mult n m) p) 
                (mult n (mult m p)) 
                pPp 
                (w : (El nat) => (eq nat (add w (mult n m)) (mult n (mult m (S p))))) 
                (distrib_left_rule n (mult m p) m (w : (El nat) => (eq nat w (mult n (mult m (S p))))) (eq_refl_rule nat (mult n (mult m (S p))))))))))))).

thm mult_assoc_rule : (n : (El nat) -> (m : (El nat) -> (p : (El nat) -> (Prf (eq nat (mult (mult n m) p) (mult n (mult m p))))))) 
:= (n : (El nat) => (m : (El nat) => (p : (El nat) => (all_e nat 
    (p1 : (El nat) => (eq nat (mult (mult n m) p1) (mult n (mult m p1)))) 
    (all_e nat 
        (m1 : (El nat) => (all nat (p1 : (El nat) => (eq nat (mult (mult n m1) p1) (mult n (mult m1 p1)))))) 
        (all_e nat 
            (n1 : (El nat) => (all nat (m1 : (El nat) => (all nat (p1 : (El nat) => (eq nat (mult (mult n1 m1) p1) (mult n1 (mult m1 p1)))))))) 
            mult_assoc 
            n)
        m) 
    p)))).

def exp : ((El nat) -> ((El nat) -> (El nat))).
[b] exp b 0 --> (S 0).
[b, x] exp b (S x) --> (mult b (exp b x)).

thm mult_one : (Prf (all nat (n : (El nat) => (eq nat n (mult n (S 0)))))) 
:= (all_i nat 
    (n : (El nat) => (eq nat n (mult n (S 0)))) 
    (n : (El nat) => (all_e nat 
        (n1 : (El nat) => (eq nat (add 0 n1) n1)) 
        add_Zn 
        n 
        (w : (El nat) => (eq nat w (add 0 n))) 
        (eq_refl_rule nat (add 0 n))))).

thm exp_add : (Prf (all nat (b : (El nat) => (all nat (n : (El nat) => (all nat (m : (El nat) => (eq nat (exp b (add n m)) (mult (exp b n) (exp b m)))))))))) 
:= (all_i nat 
    (b : (El nat) => (all nat (n : (El nat) => (all nat (m : (El nat) => (eq nat (exp b (add n m)) (mult (exp b n) (exp b m)))))))) 
    (b : (El nat) => (all_i nat 
        (n : (El nat) => (all nat (m : (El nat) => (eq nat (exp b (add n m)) (mult (exp b n) (exp b m)))))) 
        (n : (El nat) => (induction_rule 
            (m : (El nat) => (eq nat (exp b (add n m)) (mult (exp b n) (exp b m)))) 
            (all_e nat (n1 : (El nat) => (eq nat n1 (mult n1 (S 0)))) mult_one (exp b n) 
                (w : (El nat) => (eq nat (exp b (add n 0)) w)) 
                (eq_refl_rule nat (exp b n))) 
            (m : (El nat) => (pPm : (Prf (eq nat (exp b (add n m)) (mult (exp b n) (exp b m)))) => (mult_assoc_rule (exp b n) b (exp b m) 
                (w : (El nat) => (eq nat (mult b (exp b (add n m))) w)) 
                (mult_comm_rule b (exp b n) 
                    (w : (El nat) => (eq nat (mult b (exp b (add n m))) (mult w (exp b m)))) 
                    (eq_sym_rule nat (exp b (add n m)) (mult (exp b n) (exp b m)) pPm 
                        (w : (El nat) => (eq nat (mult b w) (mult (mult b (exp b n)) (exp b m)))) 
                        (mult_assoc_rule b (exp b n) (exp b m) 
                            (w : (El nat) => (eq nat w (mult (mult b (exp b n)) (exp b m)))) 
                            (eq_refl_rule nat (mult (mult b (exp b n)) (exp b m)))))))))))))).

thm exp_add_rule : (b : (El nat) -> (n : (El nat) -> (m : (El nat) -> (Prf (eq nat (exp b (add n m)) (mult (exp b n) (exp b m))))))) 
:= (b : (El nat) => (n : (El nat) => (m : (El nat) => (all_e nat 
    (m1 : (El nat) => (eq nat (exp b (add n m1)) (mult (exp b n) (exp b m1)))) 
    (all_e nat 
        (n1 : (El nat) => (all nat (m1 : (El nat) => (eq nat (exp b (add n1 m1)) (mult (exp b n1) (exp b m1)))))) 
        (all_e nat 
            (b1 : (El nat) => (all nat (n1 : (El nat) => (all nat (m1 : (El nat) => (eq nat 
                (exp b1 (add n1 m1)) 
                (mult (exp b1 n1) (exp b1 m1)))))))) 
            exp_add 
            b) 
        n) 
    m)))).

thm exp_mult : (Prf (all nat (b : (El nat) => (all nat (n : (El nat) => (all nat (m : (El nat) => (eq nat (exp b (mult n m)) (exp (exp b n) m))))))))) 
:= (all_i nat 
    (b : (El nat) => (all nat (n : (El nat) => (all nat (m : (El nat) => (eq nat (exp b (mult n m)) (exp (exp b n) m))))))) 
    (b : (El nat) => (all_i nat 
        (n : (El nat) => (all nat (m : (El nat) => (eq nat (exp b (mult n m)) (exp (exp b n) m))))) 
        (n : (El nat) => (induction_rule 
            (m : (El nat) => (eq nat (exp b (mult n m)) (exp (exp b n) m))) 
            (eq_refl_rule nat (S 0)) 
            (m : (El nat) => (pPm : (Prf (eq nat (exp b (mult n m)) (exp (exp b n) m))) => (pPm 
                (w : (El nat) => (eq nat (exp b (mult n (S m))) (mult (exp b n) w))) 
                (exp_add_rule b n (mult n m) 
                    (w : (El nat) => (eq nat (exp b (mult n (S m))) w)) 
                    (add_comm_rule (mult n m) n 
                        (w : (El nat) => (eq nat (exp b (mult n (S m))) (exp b w))) 
                        (eq_refl_rule nat (exp b (mult n (S m)))))))))))))).

thm exp_mult_rule : (b : (El nat) -> (n : (El nat) -> (m : (El nat) -> (Prf (eq nat (exp b (mult n m)) (exp (exp b n) m)))))) 
:= (b : (El nat) => (n : (El nat) => (m : (El nat) => (all_e nat 
    (m1 : (El nat) => (eq nat (exp b (mult n m1)) (exp (exp b n) m1))) 
    (all_e nat 
        (n1 : (El nat) => (all nat (m1 : (El nat) => (eq nat (exp b (mult n1 m1)) (exp (exp b n1) m1))))) 
        (all_e nat 
            (b1 : (El nat) => (all nat (n1 : (El nat) => (all nat (m1 : (El nat) => (eq nat (exp b1 (mult n1 m1)) (exp (exp b1 n1) m1))))))) 
            exp_mult b) 
        n) 
    m)))).

def leq : ((El nat) -> ((El nat) -> Prop)).
[_0, _1] leq _0 _1 --> (ex nat (p : (El nat) => (eq nat (add _0 p) _1))).

thm leq_refl : (n : (El nat) -> (Prf (leq n n))) 
:= (n : (El nat) => (ex_i nat (p : (El nat) => (eq nat (add n p) n)) 0 (eq_refl_rule nat n))).

thm leq_trans : (n : (El nat) -> (m : (El nat) -> (p : (El nat) -> ((Prf (leq n m)) -> ((Prf (leq m p)) -> (Prf (leq n p))))))) 
:= (n : (El nat) => (m : (El nat) => (p : (El nat) => (Pnm : (Prf (leq n m)) => (Pmp : (Prf (leq m p)) => (ex_e nat 
    (x : (El nat) => (eq nat (add n x) m)) 
    Pnm 
    (leq n p) 
    (x : (El nat) => (Px : (Prf (eq nat (add n x) m)) => (ex_e nat 
        (y : (El nat) => (eq nat (add m y) p)) 
        Pmp 
        (leq n p) 
        (y : (El nat) => (Py : (Prf (eq nat (add m y) p)) => (ex_i nat 
            (z : (El nat) => (eq nat (add n z) p)) 
            (add x y) 
            (Py 
                (w : (El nat) => (eq nat (add n (add x y)) w)) 
                (Px 
                    (w : (El nat) => (eq nat (add n (add x y)) (add w y))) 
                    (eq_sym_rule nat (add (add n x) y) (add n (add x y)) (add_assoc_rule n x y)))))))))))))))).

thm leq_antisym : (n : (El nat) -> (m : (El nat) -> ((Prf (leq n m)) -> ((Prf (leq m n)) -> (Prf (eq nat n m)))))) 
:= (n : (El nat) => (m : (El nat) => (Pnm : (Prf (leq n m)) => (Pmn : (Prf (leq m n)) => (ex_e nat 
    (x : (El nat) => (eq nat (add n x) m)) 
    Pnm 
    (eq nat n m) 
    (x : (El nat) => (Px : (Prf (eq nat (add n x) m)) => (ex_e nat 
        (y : (El nat) => (eq nat (add m y) n)) 
        Pmn 
        (eq nat n m) 
        (y : (El nat) => (Py : (Prf (eq nat (add m y) n)) => (imp_e (eq nat x 0) (eq nat n m) 
            (imp_i (eq nat x 0) (eq nat n m) (PxZ : (Prf (eq nat x 0)) => (PxZ (w : (El nat) => (eq nat (add n w) m)) Px))) 
            (imp_e (eq nat (add x y) 0) (eq nat x 0) 
                (all_e nat 
                    (m1 : (El nat) => (imp (eq nat (add x m1) 0) (eq nat x 0))) 
                    (all_e nat (n1 : (El nat) => (all nat (m1 : (El nat) => (imp (eq nat (add n1 m1) 0) (eq nat n1 0))))) add_left_cancel_Z x) 
                    y) 
                (add_left_cancel_rule (add x y) n (add_assoc_rule n x y 
                    (w : (El nat) => (eq nat w n)) 
                    (eq_sym_rule nat (add n x) m Px (w : (El nat) => (eq nat (add w y) n)) Py))))))))))))))).
